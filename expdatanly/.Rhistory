Demo ()
demo ()
install.packages("rmarkdown")
sourav <- c(1,2,3)
library(dplyr)
library(tidyr)
library(xlsx)
library(swirl)
swirl()
library(readr)
hospital_data <- read_csv("D:/Git/datasciencecoursera/hospital-data.csv")
View(hospital_data)
check1 <- filter(hospital_data, Hospital Name, State, Emergency Services)
check1 <- select(hospital_data, Hospital Name, State, Emergency Services)
check1 <- tbl(hospital_data)
check1 <- tbl_df(hospital_data)
check2 <- select(check1,Hospital Name, State, Emergency Services)
check2 <- select(check1,3)
check2
check2 <- select(check1,Hospital Name)
check2 <- select(check1,"Hospital Name")
check2 <- select(check1,"Hospital Name", "State", "Emergency Services")
check2
group_by(check,"Emergency Services"= Yes)
group_by(check2,"Emergency Services"= Yes)
group_by(check2,"Emergency Services")
swirl()
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm(mydf)
rm("mydf")
cran
q()
## Task 1
## import Test Value
Xtest <-
read.table("C:/Users/MTS009568/Downloads/UCI HAR Dataset/test/X_test.txt")
Ytest <-
read.table("C:/Users/MTS009568/Downloads/UCI HAR Dataset/test/y_test.txt")
Subtest <-
read.table("C:/Users/MTS009568/Downloads/UCI HAR Dataset/test/subject_test.txt")
## Import Train Values
Xtrain <-
read.table("C:/Users/MTS009568/Downloads/UCI HAR Dataset/train/X_train.txt")
Ytrain <-
read.table("C:/Users/MTS009568/Downloads/UCI HAR Dataset/train/y_train.txt")
Subtrain <-
read.table("C:/Users/MTS009568/Downloads/UCI HAR Dataset/train/subject_train.txt")
## Merge test and train sets
XFull <- rbind(Xtest,Xtrain)
YFull <- rbind(Ytest,Ytrain)
SubFull <- rbind(Subtest, Subtrain)
#Import features for Column Names
features <-
read.table("C:/Users/MTS009568/Downloads/UCI HAR Dataset/features.txt")
colnames(XFull) <- features[,2]
## Check for correct update
head(XFull)
## select columns with names Mean and Std
#Create a logical vector to check which column names contain"mean()" or "std()"
col <- grepl("mean()",colnames(XFull)) | grepl("std()",colnames(XFull))
# select columns where logical vector is TRUE
XMeanSd <- XFull[,col]
View(XMeanSd)
act <-
read.table("C:/Users/MTS009568/Downloads/UCI HAR Dataset/activity_labels.txt")
Yfact <- as.factor(YFull[,1])
library(plyr)
xms <- XMeanSd
Yfact <- as.factor(YFull[,1])
Yfact <- mapvalues(Yfact, from = as.character(act[,1]),to = as.character(act[,2]))
xms <- cbind(Yfact,xms)
View(xms)
colnames(xms$Yfact) <- "activity"
colnames(xms[1]) <- "activity"
names(xms)[1] <- "activity"
View(xms)
View(XMeanSd)
View(XMeanSd)
View(XMeanSd)
colnames(xms)[1] <- "activities"
View(xms)
rm(xms)
XMeanSd <- cbind(Yfact,XMeanSd)
head(XMeanSd) ## it did !!!
colnames(XMeanSd)[1] <- "Activity"
View(XMeanSd)
XMeanSd <- cbind(SubFull,XMeanSd)
head(XMeanSd)
colnames(XMeanSd)[1] <- "subject"
View(XMeanSd)
view(XmeanSd)
View(XmeanSd)
View(XMeanSd)
library(reshape2)
xms <- melt(XMeanSd, id.vars = c("subject","Activity"))
View(xms)
tidydata <- dcast(xms, subject + Activity ~ variable, mean)
write.table(tidydata,"d:/tidydata.txt", row.names = F, quote = F)
library(readxl)
Prepaid_Details <- read_excel("D:/Usage POstpaid/Prepaid Details.xlsx")
View(Prepaid_Details)
library(datasets)
data(cars)
with(cars, plot(speed,dist))
with(cars, plot(speed,dist, color = green))
with(cars, plot(speed,dist))
if(!is.null(inv)) {
message("getting cached data.")
return(inv)
}
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinverse <- function(inverse) inv <<- inverse
getinverse <- function() inv
list(set=set, get=get, setinverse=setinverse, getinverse=getinverse)
}
##This will calculate the inverse of the matrix
## it will first check if the inverse has been calculated earlier
## if yes, then it will get the results
## if no, then it will calculate and then store the value in cache
cacheSolve <- function(x, ...) {
inv <- x$getinverse()
if(!is.null(inv)) {
message("getting cached data.")
return(inv)
}
data <- x$get()
inv <- solve(data)
x$setinverse(inv)
inv
}
library(lattice)
?par
library(datasets)
hist(airquality$Ozone)
library(swirl)
list ls()
ls()
rm(list = ls())
install_from_swirl("Exploratory Data Analysis")
install_from_swirl("Exploratory Data Analysis")
swril()
swirl()
head(pollution)
dim(pollution)
summary(pollution$pm25)
quantile(ppm)
boxplot(ppm, col = "blue")
abline(h = 12)
hist(ppm, col ="green")
rug(ppm)
low
high
hist(ppm, col = "green", breaks = 100)
rug(ppm)
hist(ppm, col ="green")
abline( v =12, lwd = 2)
abline( v = median(ppm), lwd = 4, col = "magenta")
abline(v = median(ppm), col = "magenta", lwd = 4)
names(pollution)
reg <- table(pollution$region)
reg
barplot(reg, col = "wheat", main = reg)
barplot(reg, col = "wheat", main = "Number of Counties in Each Region")
boxplot(pm24 ~ region, data = pollution, col = "red")
boxplot(pm25 ~ region, data = pollution, col = "red")
R command par(mfrow=c(2,1),mar=c(4,4,2,1))
par(mfrow=c(2,1),mar=c(4,4,2,1))
east <- subset(pollution, region == "east")
head(east)
hist(east$pm25, col ="green")
hist(pm25, data = subset(pollution, region =="west"), col ="green")
hist((subset(pollution, region =="west"))$pm25, col ="green")
hist(subset(pollution,region=="west")$pm25, col = "green")
skip()
abline(h=12, lwd = 2, lty =2)
plot(pollution$latitude,ppm, col = pollution$region)
abline(h=12, lwd =12 , lty = 2)
abline(h=12, lwd =2 , lty = 2)
par(mfrow = c(1, 2), mar = c(5, 4,
| 2, 1))
par(mfrow = c(1, 2), mar = c(5, 4, 2, 1))
west <- subset(pollution, region =="west")
plot(west$latitude, west$pm25, main = "West")
plot(east$latitude, east$pm25, main = "East")
?Devices
plot(faithful$eruptions, faithful$waiting)
with(faithful,plot(eruptions, waiting))
title(main = "Old Faithful Gesyser data")
title(main = "Old Faithful Geyser data")
dev.cur()
getwd()
pdf(file = "myplot.pdf")
title(main = "Old Faithful Geyser data")
with(faithful,plot(eruptions, waiting))
title(main = "Old Faithful Geyser data")
dev.cur()
dev.off()
dev.cur()
with(faithful,plot(eruptions, waiting))
title(main = "Old Faithful Geyser data")
dev.copy(png, "geyserplot.png")
dev.copy(png, file = "geyserplot.png")
dev.off()
head(cars)
with(cars, plot(speed,dist))
text(mean(cars$speed),max(cars$dist),"SWIRL rules")
text(mean(cars$speed),max(cars$dist),"SWIRL rules!")
head(state)
table(state$region)
xyplot(Life.Exp ~ Income | region, data = state, layout(c(4,1)))
xyplot(Life.Exp ~ Income | region, data = state, layout =c(4,1))
xyplot(Life.Exp ~ Income | region, data = state, layout =c(2,2))
head(mpg)
dim(mpg)
table(mpg$model)
qplot(displ, hwy, data = mpg)
head(airquality)
range(airquality$Ozone, na.rm = T)
range(airquality$Ozone, na.rm = TRUE)
hist(airquality$Ozone, col = "blue")
hist(airquality$Ozone)
dev.cur()
dev.off()
hist(airquality$Ozone)
hist(airquality$Ozone, col = "blue")
boxplot(airquality$Month)
table(airquality$Month)
boxplot(Ozone ~ Month, airquality)
boxplot(Ozone ~ Month, airquality, xlab = "Month", ylab = "Ozone(ppb)", col.axis = "blue", col.lab = "red")
boxplot(Ozone~Month, airquality, xlab="Month", ylab="Ozone(ppb)",col.axis="blue",col.lab="red")
skip()
title(main = "Ozone and Wind in New York City")
with(airquality, plot(wind, Ozone))
with(airquality, plot(Wind, Ozone))
title(main = "Ozone and Wind in New York City")
length(par())
names(par())
par()$pin
par('fg')
par('pch')
par('lty')
plot(airquality$Wind, airquality$Month, set = "n")
plot(airquality$Wind, airquality$Month, type = "n")
plot(airquality$Wind, type = "n", airquality$Month)
plot(airquality$Wind, type="n",airquality$Ozone)
title(main = "Wind and Ozone in NYC")
may <- subset(airquality, airquality$Month == 5)
may
may <- subset(airquality, Month == 5)
plot(may$Wind, may$Ozone, col = "blue", pch ="2")
plot(may$Wind, may$Ozone, col = "blue", pch =2)
plot(may$Wind, may$Ozone, col = "blue", pch =17)
points(may$Wind,may$Ozone,col="blue",pch=17)
notmay <- subset(airquality, airquality$Month !== 5)
notmay <- subset(airquality, airquality$Month ! 5)
notmay <- subset(airquality, airquality$Month <> 5)
notmay <- subset(airquality, airquality$Month != 5)
notmay <- subset(airquality, Month != 5)
points(notmay$Wind, notmay$Ozone, col = "red", pch = ~:)
points(notmay$Wind, notmay$Ozone, col = "red", pch = '-')
points(notmay$Wind, notmay$Ozone, col = "red", pch = 8)
skip()
abline( v = median(airquality$Wind), lwd = 2, lty =2)
abline( v = median(airquality$Wind), lty = 2, lwd =2)
par(mfrow(c(1,2))
)
skip()
skip()
skip()
par(mfrow = c(1,3), mar = c(4,4,2,1), oma =c(0,0,2,0))
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
swirl()
"
download.file(url,destfile = "d:/test1.csv" )
test1 <- read.csv("d:/test1.csv")
download.file(url,destfile = "test1.csv" )
download.file(url,destfile = "test1.csv" )
download.file(url,destfile = "test4.csv" )
rm(list=ls())
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv <https://d396qusza40orc.cloudfront.net/getdata/data/EDSTATS_Country.csv>
"
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv <https://d396qusza40orc.cloudfront.net/getdata/data/EDSTATS_Country.csv"
download.file(url,destfile = "test4.csv" )
download.file(url,destfile = "test4.csv" )
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv""
"
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv"
download.file(url,destfile = "test4.csv" )
getwd()
list.files()
chec1 <- read.csv("test4.csv"")
""
chec1 <- read.csv("test4.csv")
chec1)
head(chec1)
names(chec1)
list.files()
setwd("C:/Users/MTS009568/Downloads")
list.files()
read.table("./household_power_consumption.txt", header = T, sep = ";", stringsAsFactors = F, dec = ".")
df1 <- read.table("./household_power_consumption.txt", header = T, sep = ";", stringsAsFactors = F, dec = ".")
names(df1)
head(date)
head(df1$Date)
str(df1)
df2 <- data[df1$Date %in% c("1/2/2007, 2/2/2007"),]
df2 <- data[df1$Date %in% c("1/2/2007", "2/2/2007"),]
df2 <- df1
df2$Date <- as.Date(df2$Date)
head(df2$Date)
head(df2$Date)
head(df1$Date)
rm(df2)
df2 <- subset(df1, df1$Date == "1/2/2007"| df1$Date =="2/2/2007")
View(df2)
hist(df2$Global_active_power)
head(df2)
strd(df2)
str(df2)
df2$Global_active_power <- as.numeric(df2$Global_active_power)
str(df2)
hist(df2$Global_active_power, col= "red")
title( main = "Global Active Power", xlab = "Global Active Power (kilowatts")
df2$Global_active_power <- as.numeric(df2$Global_active_power, xlab = "Global Active Power(kilowatts")
hist(df2$Global_active_power, col= "red", xlab = "Global Active Power(kilowatts")
title( main = "Global Active Power")
hist(df2$Global_active_power, col= "red",main = "Global Active power" xlab = "Global Active Power(kilowatts)")
hist(df2$Global_active_power, col= "red",main = "Global Active power", xlab = "Global Active Power(kilowatts)")
getwd()
setwd("D:/Git/datasciencecoursera/Exploratory Data Analysis")
png("plot1.png",width = 480, height = 480)
hist(df2$Global_active_power, col= "red",main = "Global Active power", xlab = "Global Active Power(kilowatts)")
dev.off
dev.off
dev.off()
View(df2)
getwd()
dt <- strptime(paste(df2$Date,df2$Time, sep = " "), "%d %m %y %h:%m:%s")
str(dt)
head(dt)
dt
rm(dt)
dt <- strptime(paste(df2$Date,df2$Time, sep = " "), "%d%m%y %h:%m:%s")
head(dt)
dt
rm(dt)
df3 <- df2
head(df3)
?strptime
dt <- strptime(paste(df2$Date, df2$Time, sep=" "), "%d/%m/%Y %H:%M:%S")
str(dt)
head(dt)
df2$Global_active_power <- as.numeric(df2$Global_active_power))
df2$Global_active_power <- as.numeric(df2$Global_active_power)
head(dt)
png("plot2.png",width = 480, height = 480)
plot(dt,df2$Global_active_power, type = "1",xlab = "", ylab = "Global Active Power(kilowatts)")
plot(dt,df2$Global_active_power, type = "l",xlab = "", ylab = "Global Active Power(kilowatts)")
dev.off()
plot(dt,df2$Global_active_power, type = "l",xlab = "", ylab = "Global Active Power(kilowatts)")
df2$Sub_metering_1 <- as.numeric(df2$Sub_metering_1)
df2$Sub_metering_2 <- as.numeric(df2$Sub_metering_2)
df2$Sub_metering_3 <- as.numeric(df2$Sub_metering_3)
str(df2)
png("plot3.png",width = 480, height = 480)
plot(dt, df2$Sub_metering_1, type = "l",xlab ="", ylab = "Energy sub metering")
lines(dt,df2$Sub_metering_2, type = "l", col = "red")
lines(dt,df2$Sub_metering_3, type = "l", col = "blue")
legend("topright", c("sub_metering_1","Sub_metering_2, Sub_metering_3"), lty = 1, lwd = 2.5, col = c("black", "red", "blue"))
dev.off()
png("plot3.png",width = 480, height = 480)
plot(dt, df2$Sub_metering_1, type = "l",xlab ="", ylab = "Energy sub metering")
lines(dt,df2$Sub_metering_2, type = "l", col = "red")
lines(dt,df2$Sub_metering_3, type = "l", col = "blue")
legend("topright", c("sub_metering_1","Sub_metering_2", "Sub_metering_3"), lty = 1, lwd = 2.5, col = c("black", "red", "blue"))
dev.off()
plot(dt, df2$Sub_metering_1, type = "l",xlab ="", ylab = "Energy sub metering")
lines(dt,df2$Sub_metering_2, type = "l", col = "red")
lines(dt,df2$Sub_metering_3, type = "l", col = "blue")
legend("topright", c("sub_metering_1","Sub_metering_2", "Sub_metering_3"), lty = 1, lwd = 2.5, col = c("black", "red", "blue"))
df2$Global_active_power <- as.numeric(df2$Global_active_power)
df2$Global_reactive_power <- as.numeric(df2$Global_reactive_power)
df3$Voltage <- as.numeric(df2$Voltage)
str(df2)
df2$Voltage <- as.numeric(df2$Voltage)
str(df2)
rm(df3)
par(mfrow =c(2,2))
plot(dt, df2$Global_active_power, type = "l",xlab ="", ylab = "Global Active power", cex =0.2)
plot(dt, df2$Voltage, type = "l", xlab = "datetime", ylab = "Voltage")
plot(dt,df2$Sub_metering_1, type = "l", xlab = "", ylab ="Energy sub metering")
lines(dt, df2$Sub_metering_2, type = "l", col ="red")
lines(dt, df2$Sub_metering_3, type = "l", col ="blue")
legend("topright", c("sub_metering_1","Sub_metering_2", "Sub_metering_3"), lty = 1, lwd = 2.5, col = c("black", "red", "blue"))
plot(dt, df2$Global_reactive_power, type = "l", xlab = "datetime", ylab = " Global_reactive_power")
# creating Png
png("plot4.png",width = 480, height = 480)
par(mfrow =c(2,2))
# 1st graph
plot(dt, df2$Global_active_power, type = "l",xlab ="", ylab = "Global Active power", cex =0.2)
#2nd graph
plot(dt, df2$Voltage, type = "l", xlab = "datetime", ylab = "Voltage")
#3rd graph
plot(dt,df2$Sub_metering_1, type = "l", xlab = "", ylab ="Energy sub metering")
lines(dt, df2$Sub_metering_2, type = "l", col ="red")
lines(dt, df2$Sub_metering_3, type = "l", col ="blue")
legend("topright", c("sub_metering_1","Sub_metering_2", "Sub_metering_3"), lty = 1, lwd = 2.5, col = c("black", "red", "blue"))
# 4th graph
plot(dt, df2$Global_reactive_power, type = "l", xlab = "datetime", ylab = " Global_reactive_power")
dev.off()
q()
